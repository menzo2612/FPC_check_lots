from __future__ import annotations

from os.path import exists
from typing import TYPE_CHECKING

import telebot

if TYPE_CHECKING:
    from exfa import exfa

import os
import FunPayAPI.types
from FunPayAPI.account import Account
from logging import getLogger
from telebot.types import Message
from tg_bot import static_keyboards as skb
import time
import json

NAME = "Lots Active"
VERSION = "0.1"
DESCRIPTION = """
–≠—Ç–æ—Ç –ø–ª–∞–≥–∏–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –±—ã–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã.  
–û–Ω —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —É–ø—Ä–æ—â–∞–µ—Ç —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å, –ø–æ–∑–≤–æ–ª—è—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É (–¢–ü) –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–∫–∞–∑–æ–≤ (#id), –∏—Å–∫–ª—é—á–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä—É—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.  
–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è –∏ –ø–æ–≤—ã—Å–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π.\n\n üìÇ FPC –ø–ª–∞–≥–∏–Ω—ã - https://t.me/menzo_files
"""
CREDITS = "@menzo2612"
UUID = "0db41922-0fb9-4418-9e5d-cbaed0d89668"
SETTINGS_PAGE = False

logger = getLogger("FPC.lots_active")

def get_active_orders(exfa: exfa, tg_msg: Message) -> None:
    bot = exfa.telegram.bot

    try:
        next_order_id, orders = exfa.account.get_sells(include_closed=False, include_refunded=False)

        if not orders:
            bot.send_message(tg_msg.chat.id, "üü¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            return

        message = "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
        active_order_ids = []

        for order_shortcut in orders:
            try:
                order = exfa.account.get_order(order_shortcut.id)
                message += f"üîπ ID –∑–∞–∫–∞–∑–∞: #{order.id}\n"
                message += f"üîπ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {order.buyer_username}\n"
                message += f"üîπ –°—Ç–∞—Ç—É—Å: {order.status}\n"
                message += f"üîπ –¢–æ–≤–∞—Ä: {order.short_description}\n"
                message += f"üîπ –¶–µ–Ω–∞: {order.sum} —Ä—É–±.\n"
                message += f"üîπ –°—Å—ã–ª–∫–∞: https://funpay.com/orders/{order.id}/\n\n"
                active_order_ids.append(order.id)
            except Exception as e:
                logger.error(f"[ACTIVE ORDERS] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ {order_shortcut.id}. –û—à–∏–±–∫–∞: {e}")
                message += f"üîπ ID –∑–∞–∫–∞–∑–∞: #{order_shortcut.id}\n"
                message += f"üîπ –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ.\n\n"
                active_order_ids.append(order_shortcut.id)

        file_path = os.path.join("storage", "plugins", "active_orders.json")
        os.makedirs(os.path.dirname(file_path), exist_ok=True)

        with open(file_path, "w", encoding="utf-8") as file:
            json.dump(active_order_ids, file, ensure_ascii=False, indent=4)

        bot.send_message(tg_msg.chat.id, message)

        active_orders_formatted = " ".join([f"<code>#{order_id}</code>" for order_id in active_order_ids])
        bot.send_message(tg_msg.chat.id, f"–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {active_orders_formatted}", parse_mode="HTML")

        with open(file_path, "rb") as file:
            bot.send_document(tg_msg.chat.id, file, caption="–§–∞–π–ª —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏ (active_orders.json)")

    except Exception as e:
        logger.error(f"[ACTIVE ORDERS] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã. –û—à–∏–±–∫–∞: {e}")
        bot.send_message(tg_msg.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def init_commands(exfa: exfa):
    if not exfa.telegram:
        return
    tg = exfa.telegram
    bot = exfa.telegram.bot

    def active_orders(m: Message):
        get_active_orders(exfa, m)

    exfa.add_telegram_commands(UUID, [
        ("active_orders", "–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", True),
    ])

    tg.msg_handler(active_orders, commands=["active_orders"])

BIND_TO_PRE_INIT = [init_commands]
BIND_TO_DELETE = None